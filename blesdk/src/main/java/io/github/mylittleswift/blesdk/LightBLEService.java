package io.github.mylittleswift.blesdk;import android.app.Service;import android.bluetooth.BluetoothAdapter;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothGatt;import android.bluetooth.BluetoothGattCallback;import android.bluetooth.BluetoothGattCharacteristic;import android.bluetooth.BluetoothGattDescriptor;import android.bluetooth.BluetoothGattService;import android.bluetooth.BluetoothManager;import android.bluetooth.BluetoothProfile;import android.content.Context;import android.content.Intent;import android.os.Binder;import android.os.Handler;import android.os.IBinder;import android.util.Log;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.UUID;/* * 管理蓝牙的服�? * 			功能�? *			    1) 连接蓝牙设备 *				2) 管理连接状�? *				3) 获取蓝牙设备的相关服�?* * @author Kevin.wu *  */public final class LightBLEService extends Service {    private static final UUID NOTIY = UUID.fromString("00002902-0000-1000-8000-00805f9b34fb");    public final static String ACTION_GATT_CONNECTED = "com.light.ble.service.ACTION_GATT_CONNECTED";    public final static String ACTION_GATT_CONNECTING = "com.light.ble.service.ACTION_GATT_CONNECTING";    public final static String ACTION_GATT_DISCONNECTED = "com.light.ble.service.ACTION_GATT_DISCONNECTED";    public final static String ACTION_GATT_SERVICES_DISCOVERED = "com.light.ble.service.ACTION_GATT_SERVICES_DISCOVERED";    public final static String ACTION_DATA_AVAILABLE = "com.light.ble.service.ACTION_DATA_AVAILABLE";    public final static String EXTRA_DATA = "com.light.ble.service.EXTRA_DATA";    public final static String ACTION_GAT_RSSI = "com.light.ble.service.RSSI";    public final static String RFSTAR_CHARACTERISTIC_ID = "com.light.ble.service.characteristic"; // 唯一标识    public HashMap<BluetoothDevice, BluetoothGatt> hasp = new HashMap<BluetoothDevice, BluetoothGatt>();    private final IBinder kBinder = new LocalBinder();    protected List<BluetoothGattService> services;    // private BluetoothGatt gatt = null;    private static ArrayList<BluetoothGatt> arrayGatts = new ArrayList<BluetoothGatt>(); // 存放BluetoothGatt的集�?    private BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();    public static BluetoothGattCharacteristic colorCharacteristic;    private HashMap<String, BluetoothGatt> gattHash = new HashMap<String, BluetoothGatt>();    private BluetoothManager bluetoothManager;    private BluetoothAdapter mBluetoothAdapter;    private BluetoothGatt mgatt;    private Handler handler = new Handler();    @Override    public IBinder onBind(Intent intent) {        initAdapter();        MyLog.i("bind ok");        return kBinder;    }    @Override    public boolean onUnbind(Intent intent) {        return super.onUnbind(intent);    }    /**     * 初始化BLE 如果已经连接就不用再次连     */    public boolean initBluetoothDevice(final BluetoothDevice device, final Context context) {        if (getBluetoothGatt(device) != null)            return true;        // BluetoothDevice device2=mBluetoothAdapter.        // getRemoteDevice(device.getAddress());//这两步可以不要，可以直接拿device连接，此处实验和官方demo一样的连接方式        BluetoothDevice device2 = mBluetoothAdapter.getRemoteDevice(device.getAddress());        mgatt = device2.connectGatt(context, false, bleGattCallback);        if (mgatt == null) {            System.out.println(device2.getAddress() + "gatt is null");        }        MyLog.i(device.getAddress() + ": 蓝牙设备正准备连接");        // }        // });        //        // hasp.put(device,gatt);        return true;    }    private void initAdapter() {        if (bluetoothManager == null) {            bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);            if (bluetoothManager == null) {                return;            }        }        mBluetoothAdapter = bluetoothManager.getAdapter();    }    /**     * 断开连接     */    public void disconnect() {        if (mgatt == null)            return;        mgatt.disconnect();        mgatt.close();    }    /**     * 根据设备的Mac地址断开连接     *     * @param address     */    public void disconnect(String address) {        ArrayList<BluetoothGatt> gatts = new ArrayList<BluetoothGatt>();        for (BluetoothGatt gatt : arrayGatts) {            if (gatt != null && gatt.getDevice().getAddress().equals(address)) {                gatts.add(gatt);                // gatt.disconnect();                gatt.close();                // gatt = null;            }        }        arrayGatts.removeAll(gatts);    }    public class LocalBinder extends Binder {        public LightBLEService getService() {            return LightBLEService.this;        }    }    private int discoverCount;    private boolean isTime;    private BluetoothGattCallback bleGattCallback = new BluetoothGattCallback() {        /*         * 连接的状发生变化 (non-Javadoc)         *         * @see android.bluetooth.BluetoothGattCallback#onConnectionStateChange(         * android .bluetooth.BluetoothGatt, int, int)         */        @Override        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {            String action = null;            if (newState == BluetoothProfile.STATE_CONNECTED) {                action = ACTION_GATT_CONNECTED;                gatt.discoverServices();                Intent intent = new Intent(action);                String address = gatt.getDevice().getAddress();                if (address != null) {                    intent.putExtra("seraddress", address);                    sendBroadcast(intent);                }            } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {                action = ACTION_GATT_DISCONNECTED;                String address = gatt.getDevice().getAddress();                Intent intent = new Intent(action);                if (address != null) {                    intent.putExtra("seraddress", address);                    sendBroadcast(intent);                }                mgatt.close();                mgatt = null;            }        }        /*         * 搜索device中的services (non-Javadoc)         *         * @see         * android.bluetooth.BluetoothGattCallback#onServicesDiscovered(android         * .bluetooth.BluetoothGatt, int)         */        @Override        public void onServicesDiscovered(BluetoothGatt gatt, int status) {            MyLog.i(" onServicesDiscovered received: " + status);            if (status == BluetoothGatt.GATT_SUCCESS) {                broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);                discoverCount = 0;            } else {                if (discoverCount++ < 3) {                    gatt.discoverServices();                }                Log.w("RFImagicManage.RFSTAR", "onServicesDiscovered received: " + status);            }        }        /*         * 读取特征�?(non-Javadoc)         *         * @see         * android.bluetooth.BluetoothGattCallback#onCharacteristicRead(android         * .bluetooth.BluetoothGatt,         * android.bluetooth.BluetoothGattCharacteristic, int)         */        public void onCharacteristicRead(BluetoothGatt gatt,                                         BluetoothGattCharacteristic characteristic, int status) {            if (status == BluetoothGatt.GATT_SUCCESS) {                broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic, gatt.getDevice().getAddress());                MyLog.i("onCharacteristicRead received: " + status + Tools.byte2Hex(characteristic.getValue()));            } else {                Log.i("RFImagicManage.RFSTAR", "onCharacteristicRead false " + status + characteristic.toString());            }        }        public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {            if (status == BluetoothGatt.GATT_SUCCESS) {                broadcastUpdate("onDescriptorWrite");            }        }        ;        /*         * 特征值的变化 (non-Javadoc)         *         * @see android.bluetooth.BluetoothGattCallback#onCharacteristicChanged(         * android .bluetooth.BluetoothGatt,         * android.bluetooth.BluetoothGattCharacteristic)         */        public void onCharacteristicChanged(BluetoothGatt gatt,                                            BluetoothGattCharacteristic characteristic) {            // SDUtil.saveBTLog(SDUtil.getDateString(new Date()),            // Tools.byte2Hex(characteristic.getValue()));            Log.i("notiy", gatt.getDevice().getAddress() + "  " + Tools.byte2Hex(characteristic.getValue()));            broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic, gatt.getDevice().getAddress());        }        public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {            if (status == BluetoothGatt.GATT_SUCCESS) {                Log.d("onWrite" + gatt.getDevice().getAddress(), Tools.byte2Hex(characteristic.getValue()));            }            // Log.i("onwrite",gatt.getDevice().getAddress()+":"+Tools.byte2Hex(characteristic.getValue()));            //        }        ;        /*         * 读取信号 (non-Javadoc)         *         * @see         * android.bluetooth.BluetoothGattCallback#onReadRemoteRssi(android.         * bluetooth.BluetoothGatt, int, int)         */        public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {            Intent intent = new Intent(LightBLEService.ACTION_GAT_RSSI);            intent.putExtra("rssi", rssi);            sendBroadcast(intent);            System.out.println(gatt.getDevice().getAddress() + "," + rssi);        }    };    /**     * 广播     *     * @param action     */    private void broadcastUpdate(String action) {        Intent intent = new Intent(action);        // intent.putExtra("seraddress", address);        sendBroadcast(intent);    }    protected void broadcastUpdate(String action, BluetoothGattCharacteristic characteristic) {        // TODO Auto-generated method stub        Intent intent = new Intent(action);        // For all other profiles, writes the data formatted in HEX.        final byte[] data = characteristic.getValue();        if (data != null && data.length > 0) {            intent.putExtra(EXTRA_DATA, characteristic.getValue());            intent.putExtra(RFSTAR_CHARACTERISTIC_ID, characteristic.getUuid().toString());        }        sendBroadcast(intent);    }    /**     * 发�?带蓝牙信息的到广�? *     *     * @param action     * @param characteristic     */    private void broadcastUpdate(String action, BluetoothGattCharacteristic characteristic, String mac) {        Intent intent = new Intent(action);        final byte[] data = characteristic.getValue();        if (data != null && data.length > 0) {            intent.putExtra(EXTRA_DATA, characteristic.getValue());            intent.putExtra(RFSTAR_CHARACTERISTIC_ID, characteristic.getUuid().toString());            intent.putExtra("BT-MAC", mac);        }        sendBroadcast(intent);    }    /**     * 读取设备数据     *     * @param device     * @param characteristic     */    public void readValue(BluetoothDevice device, BluetoothGattCharacteristic characteristic) {        // TODO Auto-generated method stub        if (mgatt == null) {            MyLog.i("BluetoothGatt 没有初始化，所以不能读取数据");            return;        }        try {            Thread.sleep(15);        } catch (InterruptedException e) {            // TODO Auto-generated catch block            e.printStackTrace();        }        mgatt.readCharacteristic(characteristic);    }    /**     * 写入设备数据     *     * @param device     * @param characteristic     */    public void writeValue(BluetoothDevice device, BluetoothGattCharacteristic characteristic) {        // TODO Auto-generated method stub        // characteristic=gatt.getService(UUID.fromString("")).getCharacteristic(UUID.fromString(""));        if (mgatt == null) {            MyLog.e("BluetoothGatt 没有初始化，所以不能写入数据");            return;        }        byte[] value = characteristic.getValue();        if (value == null) {            MyLog.e("特征值为0 不能写入数据");            return;        }        mgatt.writeCharacteristic(characteristic);        // System.out.println("uuid"+characteristic.getUuid().toString());        // MyLog.i(        // " writeValue: 连接 数量" + arrayGatts.size()+" mac "+device.getAddress()        // );    }    public void setCharacteristicNotification(BluetoothDevice device, BluetoothGattCharacteristic characteristic,                                              boolean enable) {        // TODO Auto-generated method stub        if (mgatt == null) {            MyLog.e("setCharacteristicNotification  BluetoothGatt=null，所以不能发送使能数据");            return;        }        mgatt.setCharacteristicNotification(characteristic, enable);        try {            Thread.sleep(20);        } catch (InterruptedException e) {            e.printStackTrace();        }        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(NOTIY);        if (descriptor == null) {            MyLog.e("setCharacteristicNotification  descriptor=null，所以不能发送使能数据");            return;        }        descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);        mgatt.writeDescriptor(descriptor);    }    /**     * 获取services     *     * @return     */    public List<BluetoothGattService> getSupportedGattServices(BluetoothDevice device) {        if (mgatt == null) {            MyLog.e("getServices, gatt is null ");            return null;        }        return mgatt.getServices();    }    /**     * 根据设备的Mac地址从已经连接的设备中匹配对应的BluetoothGatt对象     *     * @param device     * @return     */    private BluetoothGatt getBluetoothGatt(BluetoothDevice device) {        return mgatt;    }    /**     * //读取信号     *     * @param device     */    public void readRssi(BluetoothDevice device) {        mgatt.readRemoteRssi();    }}